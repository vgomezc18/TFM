knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, dplyr, rmarkdown, verdata, LCMCR, here,
arrow, dplyr, rlang, purrr, glue, tidyr, stringr,
gridExtra, VIM, verdata, tidyverse, naniar)
options(warn = -1)
myNum <- function(n) {
return(prettyNum(n, big.mark = " "))
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Función para autenticar y cargar réplicas
cargar_datos <- function(carpeta, nombre, replicas) {
verdata::confirm_files(here::here(carpeta), nombre, replicas)
datos <- verdata::read_replicates(here::here(carpeta), nombre, replicas)
datos <- datos %>% select(-starts_with("in_"))
return(datos)
}
# Función para obtener tabla documentada
obtener_tabla_documentada <- function(nombre, datos, strata_vars) {
if (nombre == "desaparicion") {
verdata::summary_observed(
nombre,
datos,
strata_vars = strata_vars,
conflict_filter = TRUE,
forced_dis_filter = TRUE,
edad_minors_filter = FALSE,
include_props = FALSE
)
} else {
verdata::summary_observed(
nombre,
datos,
strata_vars = strata_vars,
conflict_filter = TRUE,
edad_minors_filter = FALSE,
include_props = FALSE
)
}
}
# Función para plot de patrones de datos faltantes
plotear_patrones_NA <- function(tabla, titulo) {
aggr(
tabla, col = c('navy', 'gray84'), numbers = TRUE, sortVars = TRUE,
labels = names(tabla), cex.axis = .6, gap = 1,
ylab = c(paste("Datos faltantes", titulo), "Patrón")
)
}
# Lista de violaciones
violaciones <- list(
desaparicion = list(carpeta = "input/desaparicion", replicas = 1:10),
homicidio = list(carpeta = "input/homicidio", replicas = 1:10),
reclutamiento = list(carpeta = "input/reclutamiento", replicas = 1:10),
secuestro = list(carpeta = "input/secuestro", replicas = 1:10)
)
# Variables de estratificación
strata_vars <- c("match_group_id", "dept_code_hecho", "edad_categoria", "edad_jep", "etnia", "muni_code_hecho", "p_str", "sexo", "yy_hecho")
# Listas para guardar resultados
tablas_documentadas <- list()
plots_NA <- list()
# Bucle para procesar cada tipo de violación
for (nombre in names(violaciones)) {
# Cargar datos
config <- violaciones[[nombre]]
datos <- cargar_datos(config$carpeta, nombre, config$replicas)
# Obtener tabla documentada
tabla_documentada <- obtener_tabla_documentada(nombre, datos, strata_vars)
# Plot de patrones de datos faltantes
plot_NA <- plotear_patrones_NA(tabla_documentada, nombre)
# Guardar resultados en listas
tablas_documentadas[[nombre]] <- tabla_documentada
plots_NA[[nombre]] <- plot_NA
# Asignar nombres específicos a los objetos
assign(paste0("tabla_documentada_", nombre), tabla_documentada)
assign(paste0("NA_patrones_plot_", nombre), plot_NA)
}
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, dplyr, rmarkdown, verdata, LCMCR, here,
arrow, dplyr, rlang, purrr, glue, tidyr, stringr,
gridExtra, VIM, verdata, tidyverse, naniar)
options(warn = -1)
myNum <- function(n) {
return(prettyNum(n, big.mark = " "))
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Función para autenticar y cargar réplicas
cargar_datos <- function(carpeta, nombre, replicas) {
verdata::confirm_files(here::here(carpeta), nombre, replicas)
datos <- verdata::read_replicates(here::here(carpeta), nombre, replicas)
datos <- datos %>% select(-starts_with("in_"))
return(datos)
}
# Función para obtener tabla documentada
obtener_tabla_documentada <- function(nombre, datos, strata_vars) {
if (nombre == "desaparicion") {
verdata::summary_observed(
nombre,
datos,
strata_vars = strata_vars,
conflict_filter = TRUE,
forced_dis_filter = TRUE,
edad_minors_filter = FALSE,
include_props = FALSE
)
} else {
verdata::summary_observed(
nombre,
datos,
strata_vars = strata_vars,
conflict_filter = TRUE,
edad_minors_filter = FALSE,
include_props = FALSE
)
}
}
# Función para plot de patrones de datos faltantes
plotear_patrones_NA <- function(tabla, titulo) {
aggr(
tabla, col = c('navy', 'gray84'), numbers = TRUE, sortVars = TRUE,
labels = names(tabla), cex.axis = .6, gap = 1,
ylab = c(paste("Datos faltantes", titulo), "Patrón")
)
}
# Lista de violaciones
violaciones <- list(
desaparicion = list(carpeta = "input/verdata-parquet/desaparicion", replicas = 1:10),
homicidio = list(carpeta = "input/verdata-parquet/homicidio", replicas = 1:10),
reclutamiento = list(carpeta = "input/verdata-parquet/reclutamiento", replicas = 1:10),
secuestro = list(carpeta = "input/verdata-parquet/secuestro", replicas = 1:10)
)
# Variables de estratificación
strata_vars <- c("match_group_id", "dept_code_hecho", "edad_categoria", "edad_jep", "etnia", "muni_code_hecho", "p_str", "sexo", "yy_hecho")
# Listas para guardar resultados
tablas_documentadas <- list()
plots_NA <- list()
# Bucle para procesar cada tipo de violación
for (nombre in names(violaciones)) {
# Cargar datos
config <- violaciones[[nombre]]
datos <- cargar_datos(config$carpeta, nombre, config$replicas)
# Obtener tabla documentada
tabla_documentada <- obtener_tabla_documentada(nombre, datos, strata_vars)
# Plot de patrones de datos faltantes
plot_NA <- plotear_patrones_NA(tabla_documentada, nombre)
# Guardar resultados en listas
tablas_documentadas[[nombre]] <- tabla_documentada
plots_NA[[nombre]] <- plot_NA
# Asignar nombres específicos a los objetos
assign(paste0("tabla_documentada_", nombre), tabla_documentada)
assign(paste0("NA_patrones_plot_", nombre), plot_NA)
}
violaciones <- list(
desaparicion = list(carpeta = "input/verdata-parquet/desaparicion", replicas = 1:10),
homicidio = list(carpeta = "input/verdata-parquet/homicidio", replicas = 1:10),
reclutamiento = list(carpeta = "input/verdata-parquet/reclutamiento", replicas = 1:10),
secuestro = list(carpeta = "input/verdata-parquet/secuestro", replicas = 1:10)
)
View(violaciones)
violaciones[["desaparicion"]][["carpeta"]]
config <- violaciones[[nombre]]
config
