conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
# Crear un data frame con las métricas
metrics_df_secue <- data.frame(
Dataset = data_names,
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_secue <- generate_cv_summary(metrics_df_secue)
metrics_cv_secue
comparison_data <- function(data, k_value) {
data[, .(
iguales = sum(sexo_real == sexo, na.rm = TRUE),
diferentes = sum(sexo_real != sexo, na.rm = TRUE),
k = k_value
), by = .(sexo_real)][, wrai := round(diferentes / (iguales + diferentes), 4)]
}
comparison_secue1 <- comparison_data(artif_ml_sexo_1[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "1")
comparison_secue2 <- comparison_data(artif_ml_sexo_2[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "2")
comparison_secue3 <- comparison_data(artif_ml_sexo_3[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "3")
comparison_secue4 <- comparison_data(artif_ml_sexo_4[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "4")
comparison_secue5 <- comparison_data(artif_ml_sexo_5[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "5")
comparison_secue <- rbindlist(list(comparison_secue1, comparison_secue2, comparison_secue3, comparison_secue4, comparison_secue5)) %>%
select(sexo_real, iguales, diferentes, wrai)
# Extraer estadísticos de los 5 folds
stats_summary_secue <- generate_indicators_summary_by_class(comparison_secue)
stats_summary_secue
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
Accuracy = sapply(metrics_list, function(x) x["Accuracy"])
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
accuracy_list <- c(accuracy_list, conf_matrix$overall["Accuracy"])
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
accuracy_list <- c(accuracy_list, conf_matrix$overall["Accuracy"])
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
accuracy_list <- c(accuracy_list, conf_matrix$overall["Accuracy"])
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
# Convertir a factores y asegurarse de que tengan los mismos niveles
predictions$sexo <- factor(predictions$sexo)
predictions$sexo_real <- factor(predictions$sexo_real)
# Asegurar que ambos factores tengan los mismos niveles
common_levels <- union(levels(predictions$sexo), levels(predictions$sexo_real))
predictions$sexo <- factor(predictions$sexo, levels = common_levels)
predictions$sexo_real <- factor(predictions$sexo_real, levels = common_levels)
# Calcular la matriz de confusión
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
# Guardar métricas generales y específicas
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
accuracy_list <- c(accuracy_list, conf_matrix$overall["Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
# Crear un data frame con las métricas incluyendo Accuracy
metrics_df_desap <- data.frame(
Dataset = data_names,
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list,
Accuracy = accuracy_list
)
metrics_cv_desap <- generate_cv_summary(metrics_df_desap)
metrics_cv_desap
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
accuracy_list <- c(accuracy_list, conf_matrix$overall["Accuracy"])
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
comparison_desap1 <- artif_ml_sexo_1[["desaparicion_1998_2016"]][["data_sexo_imputed.dt"]] %>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_desap2 <- artif_ml_sexo_2[["desaparicion_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_desap3 <- artif_ml_sexo_3[["desaparicion_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_desap4 <- artif_ml_sexo_4[["desaparicion_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_desap5 <- artif_ml_sexo_5[["desaparicion_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
data_names <- c("comparison_desap1", "comparison_desap2", "comparison_desap3", "comparison_desap4", "comparison_desap5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
# Crear un data frame con las métricas
metrics_df_desap <- data.frame(
Dataset = data_names,
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_desap <- generate_cv_summary(metrics_df_desap)
metrics_cv_desap
comparison_homi1 <- artif_ml_sexo_1[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]] %>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_homi2 <- artif_ml_sexo_2[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_homi3 <- artif_ml_sexo_3[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_homi4 <- artif_ml_sexo_4[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_homi5 <- artif_ml_sexo_5[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
data_names <- c("comparison_homi1", "comparison_homi2", "comparison_homi3", "comparison_homi4", "comparison_homi5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
# Crear un data frame con las métricas
metrics_df_homi <- data.frame(
Dataset = data_names,
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_homi <- generate_cv_summary(metrics_df_homi)
metrics_cv_homi
comparison_data <- function(data, k_value) {
data[, .(
iguales = sum(sexo_real == sexo, na.rm = TRUE),
diferentes = sum(sexo_real != sexo, na.rm = TRUE),
k = k_value
), by = .(sexo_real)][, wrai := round(diferentes / (iguales + diferentes), 4)]
}
comparison_homi1 <- comparison_data(artif_ml_sexo_1[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]], "1")
comparison_homi2 <- comparison_data(artif_ml_sexo_2[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]], "2")
comparison_homi3 <- comparison_data(artif_ml_sexo_3[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]], "3")
comparison_homi4 <- comparison_data(artif_ml_sexo_4[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]], "4")
comparison_homi5 <- comparison_data(artif_ml_sexo_5[["homicidio_1998_2016"]][["data_sexo_imputed.dt"]], "5")
comparison_homi <- rbindlist(list(comparison_homi1, comparison_homi2, comparison_homi3, comparison_homi4, comparison_homi5)) %>%
select(sexo_real, iguales, diferentes, wrai)
# Extraer estadísticos de los 5 folds
stats_summary_homi <- generate_indicators_summary_by_class(comparison_homi)
stats_summary_homi
comparison_reclu1 <- artif_ml_sexo_1[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]] %>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_reclu2 <- artif_ml_sexo_2[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_reclu3 <- artif_ml_sexo_3[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_reclu4 <- artif_ml_sexo_4[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_reclu5 <- artif_ml_sexo_5[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
data_names <- c("comparison_reclu1", "comparison_reclu2", "comparison_reclu3", "comparison_reclu4", "comparison_reclu5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
# Crear un data frame con las métricas
metrics_df_reclu <- data.frame(
Dataset = data_names,
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_reclu <- generate_cv_summary(metrics_df_reclu)
metrics_cv_reclu
comparison_data <- function(data, k_value) {
data[, .(
iguales = sum(sexo_real == sexo, na.rm = TRUE),
diferentes = sum(sexo_real != sexo, na.rm = TRUE),
k = k_value
), by = .(sexo_real)][, wrai := round(diferentes / (iguales + diferentes), 4)]
}
comparison_reclu1 <- comparison_data(artif_ml_sexo_1[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]], "1")
comparison_reclu2 <- comparison_data(artif_ml_sexo_2[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]], "2")
comparison_reclu3 <- comparison_data(artif_ml_sexo_3[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]], "3")
comparison_reclu4 <- comparison_data(artif_ml_sexo_4[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]], "4")
comparison_reclu5 <- comparison_data(artif_ml_sexo_5[["reclutamiento_1998_2016"]][["data_sexo_imputed.dt"]], "5")
comparison_reclu <- rbindlist(list(comparison_reclu1, comparison_reclu2, comparison_reclu3, comparison_reclu4, comparison_reclu5)) %>%
select(sexo_real, iguales, diferentes, wrai)
# Extraer estadísticos de los 5 folds
stats_summary_reclu <- generate_indicators_summary_by_class(comparison_reclu)
stats_summary_reclu
comparison_secue1 <- artif_ml_sexo_1[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]] %>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_secue2 <- artif_ml_sexo_2[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_secue3 <- artif_ml_sexo_3[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_secue4 <- artif_ml_sexo_4[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
comparison_secue5 <- artif_ml_sexo_5[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]]%>%
mutate(sexo = as.factor(sexo),
sexo_real = as.factor(sexo_real))
data_names <- c("comparison_secue1", "comparison_secue2", "comparison_secue3", "comparison_secue4", "comparison_secue5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (name in data_names) {
predictions <- get(name)
if ("sexo_real" %in% colnames(predictions)) {
conf_matrix <- confusionMatrix(predictions$sexo, predictions$sexo_real)
metrics_list[[name]] <- conf_matrix$overall
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
} else {
warning(paste("Column 'sexo_real' not found in", name))
}
}
# Crear un data frame con las métricas
metrics_df_secue <- data.frame(
Dataset = data_names,
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_secue <- generate_cv_summary(metrics_df_secue)
metrics_cv_secue
comparison_data <- function(data, k_value) {
data[, .(
iguales = sum(sexo_real == sexo, na.rm = TRUE),
diferentes = sum(sexo_real != sexo, na.rm = TRUE),
k = k_value
), by = .(sexo_real)][, wrai := round(diferentes / (iguales + diferentes), 4)]
}
comparison_secue1 <- comparison_data(artif_ml_sexo_1[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "1")
comparison_secue2 <- comparison_data(artif_ml_sexo_2[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "2")
comparison_secue3 <- comparison_data(artif_ml_sexo_3[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "3")
comparison_secue4 <- comparison_data(artif_ml_sexo_4[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "4")
comparison_secue5 <- comparison_data(artif_ml_sexo_5[["secuestro_1998_2016"]][["data_sexo_imputed.dt"]], "5")
comparison_secue <- rbindlist(list(comparison_secue1, comparison_secue2, comparison_secue3, comparison_secue4, comparison_secue5)) %>%
select(sexo_real, iguales, diferentes, wrai)
# Extraer estadísticos de los 5 folds
stats_summary_secue <- generate_indicators_summary_by_class(comparison_secue)
stats_summary_secue
