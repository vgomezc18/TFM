23691+1040
# homicidio
artif_regresion_sexo_homi1 <- (artif_regresion_sexo_1[["homicidio_1998_2016"]])
artif_regresion_sexo_homi2 <- (artif_regresion_sexo_2[["homicidio_1998_2016"]])
artif_regresion_sexo_homi3 <- (artif_regresion_sexo_3[["homicidio_1998_2016"]])
artif_regresion_sexo_homi4 <- (artif_regresion_sexo_4[["homicidio_1998_2016"]])
artif_regresion_sexo_homi5 <- (artif_regresion_sexo_5[["homicidio_1998_2016"]])
comparacion_homi <- complete_violencias_unidas_aux %>%
filter(violencia == "homicidio") %>%
select(match_group_id, muni_code_hecho, yy_hecho, sexo) %>%
mutate(sexo_obs = as.factor(sexo)) %>%
select(-sexo) %>%
merge(artif_regresion_sexo_homi1, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion1 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_homi2, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion2 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_homi3, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion3 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_homi4, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion4 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_homi5, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion5 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
as.data.table()
# Columnas a comparar
regresion_cols <- c("sexo_regresion1", "sexo_regresion2", "sexo_regresion3", "sexo_regresion4", "sexo_regresion5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (col in regresion_cols) {
conf_matrix <- confusionMatrix(comparacion_homi[[col]], comparacion_homi$sexo_obs)
# Guardar métricas generales
metrics_list[[col]] <- conf_matrix$overall
# Guardar métricas específicas
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
}
# Crear un data frame con las métricas de cada matriz de confusión
metrics_df_homi <- data.frame(
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_homi <- generate_cv_summary(metrics_df_homi)
metrics_cv_homi
comparison_homi_stat <- comparison_data(comparacion_homi)
# Extraer estadísticos de los 5 folds
stats_summary_homi <- generate_indicators_summary(comparison_homi_stat)
stats_summary_homi
# Reclutamiento
artif_regresion_sexo_reclu1 <- (artif_regresion_sexo_1[["reclutamiento_1998_2016"]])
artif_regresion_sexo_reclu2 <- (artif_regresion_sexo_2[["reclutamiento_1998_2016"]])
artif_regresion_sexo_reclu3 <- (artif_regresion_sexo_3[["reclutamiento_1998_2016"]])
artif_regresion_sexo_reclu4 <- (artif_regresion_sexo_4[["reclutamiento_1998_2016"]])
artif_regresion_sexo_reclu5 <- (artif_regresion_sexo_5[["reclutamiento_1998_2016"]])
comparacion_reclu <- complete_violencias_unidas_aux %>%
filter(violencia == "reclutamiento") %>%
select(match_group_id, muni_code_hecho, yy_hecho, sexo) %>%
mutate(sexo_obs = as.factor(sexo)) %>%
select(-sexo) %>%
merge(artif_regresion_sexo_reclu1, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion1 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_reclu2, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion2 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_reclu3, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion3 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_reclu4, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion4 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_reclu5, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion5 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
as.data.table()
# Columnas a comparar
regresion_cols <- c("sexo_regresion1", "sexo_regresion2", "sexo_regresion3", "sexo_regresion4", "sexo_regresion5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (col in regresion_cols) {
conf_matrix <- confusionMatrix(comparacion_reclu[[col]], comparacion_reclu$sexo_obs)
# Guardar métricas generales
metrics_list[[col]] <- conf_matrix$overall
# Guardar métricas específicas
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
}
# Crear un data frame con las métricas de cada matriz de confusión
metrics_df_reclu <- data.frame(
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_reclu <- generate_cv_summary(metrics_df_reclu)
metrics_cv_reclu
comparison_reclu_stat <- comparison_data(comparacion_reclu)
# Extraer estadísticos de los 5 folds
stats_summary_reclu <- generate_indicators_summary(comparison_reclu_stat)
stats_summary_reclu
# Secuestro
artif_regresion_sexo_secue1 <- (artif_regresion_sexo_1[["secuestro_1998_2016"]])
artif_regresion_sexo_secue2 <- (artif_regresion_sexo_2[["secuestro_1998_2016"]])
artif_regresion_sexo_secue3 <- (artif_regresion_sexo_3[["secuestro_1998_2016"]])
artif_regresion_sexo_secue4 <- (artif_regresion_sexo_4[["secuestro_1998_2016"]])
artif_regresion_sexo_secue5 <- (artif_regresion_sexo_5[["secuestro_1998_2016"]])
comparacion_secue <- complete_violencias_unidas_aux %>%
filter(violencia == "secuestro") %>%
select(match_group_id, muni_code_hecho, yy_hecho, sexo) %>%
mutate(sexo_obs = as.factor(sexo)) %>%
select(-sexo) %>%
merge(artif_regresion_sexo_secue1, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion1 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_secue2, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion2 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_secue3, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion3 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_secue4, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion4 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
merge(artif_regresion_sexo_secue5, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_regresion5 = as.factor(sexo_regresion)) %>% select(-sexo_regresion) %>%
as.data.table()
# Columnas a comparar
regresion_cols <- c("sexo_regresion1", "sexo_regresion2", "sexo_regresion3", "sexo_regresion4", "sexo_regresion5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (col in regresion_cols) {
conf_matrix <- confusionMatrix(comparacion_secue[[col]], comparacion_secue$sexo_obs)
# Guardar métricas generales
metrics_list[[col]] <- conf_matrix$overall
# Guardar métricas específicas
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
}
# Crear un data frame con las métricas de cada matriz de confusión
metrics_df_secue <- data.frame(
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_secue <- generate_cv_summary(metrics_df_secue)
metrics_cv_secue
comparison_secue_stat <- comparison_data(comparacion_secue)
# Extraer estadísticos de los 5 folds
stats_summary_secue <- generate_indicators_summary(comparison_secue_stat)
stats_summary_secue
knitr::opts_chunk$set(echo = TRUE)
require(pacman)
p_load(here, readr, tidyverse, dplyr, validate, data.table, missForest,
VIM, lattice, simputation, mice, skimr, compareDF, caret)
input_dir <- here::here("06.union/output")
output_dir <- here::here("10.validacion_modelos/output/donante/sexo")
violencias_unidas_aux <- readRDS(paste0(input_dir,"/violencias_unidas_aux.rds")) %>%
as.data.table()
colSums(is.na(violencias_unidas_aux))
dim(violencias_unidas_aux)
complete_violencias_unidas_aux<-violencias_unidas_aux[complete.cases(violencias_unidas_aux),]
dim(complete_violencias_unidas_aux)
rm(violencias_unidas_aux)
set.seed(123)
complete_violencias_unidas_aux <- complete_violencias_unidas_aux %>%
group_by(violencia) %>%
mutate(grupo = sample(rep(1:5, length.out = n())))
table(complete_violencias_unidas_aux$violencia, complete_violencias_unidas_aux$grupo)
violencias_artificial_nas_1 <- complete_violencias_unidas_aux %>%
mutate(sexo = case_when(grupo == 1 ~ NA,
TRUE ~ sexo))
table(violencias_artificial_nas_1$violencia,
violencias_artificial_nas_1$grupo,
violencias_artificial_nas_1$sexo, useNA = "always")
violencias_artificial_nas_2 <- complete_violencias_unidas_aux %>%
mutate(sexo = case_when(grupo == 2 ~ NA,
TRUE ~ sexo))
violencias_artificial_nas_3 <- complete_violencias_unidas_aux %>%
mutate(sexo = case_when(grupo == 3 ~ NA,
TRUE ~ sexo))
violencias_artificial_nas_4 <- complete_violencias_unidas_aux %>%
mutate(sexo = case_when(grupo == 4 ~ NA,
TRUE ~ sexo))
violencias_artificial_nas_5 <- complete_violencias_unidas_aux %>%
mutate(sexo = case_when(grupo == 5 ~ NA,
TRUE ~ sexo))
artif_donante_sexo_1 <- readRDS(paste0(output_dir,"/artif_donante_sexo_1.rds"))
artif_donante_sexo_2 <- readRDS(paste0(output_dir,"/artif_donante_sexo_2.rds"))
artif_donante_sexo_3 <- readRDS(paste0(output_dir,"/artif_donante_sexo_3.rds"))
artif_donante_sexo_4 <- readRDS(paste0(output_dir,"/artif_donante_sexo_4.rds"))
artif_donante_sexo_5 <- readRDS(paste0(output_dir,"/artif_donante_sexo_5.rds"))
comparison_data <- function(data) {
results_list <- list()
for (i in 1:5) {
donor_col <- paste0("sexo_donante", i)
result <- data[, .(
iguales = sum(sexo_obs == get(donor_col), na.rm = TRUE),
diferentes = sum(sexo_obs != get(donor_col), na.rm = TRUE),
donante = donor_col
)]
result[, wrai := round(diferentes / (iguales + diferentes), 4)]
results_list[[i]] <- result
}
final_result <- rbindlist(results_list)
return(final_result)
}
generate_indicators_summary <- function(data) {
# Verificar que las columnas necesarias están presentes
required_cols <- c("diferentes", "wrai")
if (!all(required_cols %in% colnames(data))) {
stop("Faltan una o más columnas necesarias en los datos.")
}
# Convertir el data frame en data.table
data_dt <- as.data.table(data)
# Calcular el resumen estadístico para todas las observaciones sin agrupar por sexo
stats_summary <- data.table(
Metric = c("diferentes", "wrai"),
Min = c(
round(min(data_dt$diferentes, na.rm = TRUE), 0),
paste0(round(min(data_dt$wrai, na.rm = TRUE) * 100, 2), "%")
),
`1st_Qu.` = c(
round(quantile(data_dt$diferentes, 0.25, na.rm = TRUE), 0),
paste0(round(quantile(data_dt$wrai, 0.25, na.rm = TRUE) * 100, 2), "%")
),
Median = c(
round(median(data_dt$diferentes, na.rm = TRUE), 0),
paste0(round(median(data_dt$wrai, na.rm = TRUE) * 100, 2), "%")
),
Mean = c(
round(mean(data_dt$diferentes, na.rm = TRUE), 0),
paste0(round(mean(data_dt$wrai, na.rm = TRUE) * 100, 2), "%")
),
`3rd_Qu.` = c(
round(quantile(data_dt$diferentes, 0.75, na.rm = TRUE), 0),
paste0(round(quantile(data_dt$wrai, 0.75, na.rm = TRUE) * 100, 2), "%")
),
Max = c(
round(max(data_dt$diferentes, na.rm = TRUE), 0),
paste0(round(max(data_dt$wrai, na.rm = TRUE) * 100, 2), "%")
),
SD = c(
round(sd(data_dt$diferentes, na.rm = TRUE), 2),
paste0(round(sd(data_dt$wrai, na.rm = TRUE) * 100, 2), "%")
)
)
return(stats_summary)
}
generate_cv_summary <- function(metrics_df) {
metrics_dt <- as.data.table(metrics_df)
stats_summary <- data.table(
Metric = colnames(metrics_dt),
Min = paste0(sapply(metrics_dt, function(x) round(min(x, na.rm = TRUE)*100, 2)), "%"),
`1st_Qu.` = paste0(sapply(metrics_dt, function(x) round(quantile(x, 0.25, na.rm = TRUE)*100, 2)), "%"),
Median = paste0(sapply(metrics_dt, function(x) round(median(x, na.rm = TRUE)*100, 2)), "%"),
Mean = paste0(sapply(metrics_dt, function(x) round(mean(x, na.rm = TRUE)*100, 2)), "%"),
`3rd_Qu.` = paste0(sapply(metrics_dt, function(x) round(quantile(x, 0.75, na.rm = TRUE)*100, 2)), "%"),
Max = paste0(sapply(metrics_dt, function(x) round(max(x, na.rm = TRUE)*100, 2)), "%"),
SD = paste0(sapply(metrics_dt, function(x) round(sd(x, na.rm = TRUE)*100, 2)), "%")
)
return(stats_summary)
}
# Desaparición
artif_donante_sexo_desap1 <- (artif_donante_sexo_1[["desaparicion_1998_2016"]])
artif_donante_sexo_desap2 <- (artif_donante_sexo_2[["desaparicion_1998_2016"]])
artif_donante_sexo_desap3 <- (artif_donante_sexo_3[["desaparicion_1998_2016"]])
artif_donante_sexo_desap4 <- (artif_donante_sexo_4[["desaparicion_1998_2016"]])
artif_donante_sexo_desap5 <- (artif_donante_sexo_5[["desaparicion_1998_2016"]])
comparacion_desap <- complete_violencias_unidas_aux %>%
filter(violencia == "desaparicion") %>%
select(match_group_id, muni_code_hecho, yy_hecho, sexo) %>%
mutate(sexo_obs = as.factor(sexo)) %>%
select(-sexo) %>%
merge(artif_donante_sexo_desap1, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante1 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_desap2, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante2 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_desap3, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante3 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_desap4, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante4 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_desap5, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante5 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
as.data.table()
# Columnas a comparar
donante_cols <- c("sexo_donante1", "sexo_donante2", "sexo_donante3", "sexo_donante4", "sexo_donante5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (col in donante_cols) {
conf_matrix <- confusionMatrix(comparacion_desap[[col]], comparacion_desap$sexo_obs)
# Guardar métricas generales
metrics_list[[col]] <- conf_matrix$overall
# Guardar métricas específicas
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
}
# Crear un data frame con las métricas de cada matriz de confusión
metrics_df_desap <- data.frame(
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_desap <- generate_cv_summary(metrics_df_desap)
metrics_cv_desap
comparison_desap_stat <- comparison_data(comparacion_desap)
# Extraer estadísticos de los 5 folds
stats_summary_desap <- generate_indicators_summary(comparison_desap_stat)
stats_summary_desap
# homicidio
artif_donante_sexo_homi1 <- (artif_donante_sexo_1[["homicidio_1998_2016"]])
artif_donante_sexo_homi2 <- (artif_donante_sexo_2[["homicidio_1998_2016"]])
artif_donante_sexo_homi3 <- (artif_donante_sexo_3[["homicidio_1998_2016"]])
artif_donante_sexo_homi4 <- (artif_donante_sexo_4[["homicidio_1998_2016"]])
artif_donante_sexo_homi5 <- (artif_donante_sexo_5[["homicidio_1998_2016"]])
comparacion_homi <- complete_violencias_unidas_aux %>%
filter(violencia == "homicidio") %>%
select(match_group_id, muni_code_hecho, yy_hecho, sexo) %>%
mutate(sexo_obs = as.factor(sexo)) %>%
select(-sexo) %>%
merge(artif_donante_sexo_homi1, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante1 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_homi2, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante2 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_homi3, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante3 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_homi4, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante4 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_homi5, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante5 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
as.data.table()
# Columnas a comparar
donante_cols <- c("sexo_donante1", "sexo_donante2", "sexo_donante3", "sexo_donante4", "sexo_donante5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (col in donante_cols) {
conf_matrix <- confusionMatrix(comparacion_homi[[col]], comparacion_homi$sexo_obs)
# Guardar métricas generales
metrics_list[[col]] <- conf_matrix$overall
# Guardar métricas específicas
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
}
# Crear un data frame con las métricas de cada matriz de confusión
metrics_df_homi <- data.frame(
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_homi <- generate_cv_summary(metrics_df_homi)
metrics_cv_homi
comparison_homi_stat <- comparison_data(comparacion_homi)
# Extraer estadísticos de los 5 folds
stats_summary_homi <- generate_indicators_summary(comparison_homi_stat)
stats_summary_homi
# Reclutamiento
artif_donante_sexo_reclu1 <- (artif_donante_sexo_1[["reclutamiento_1998_2016"]])
artif_donante_sexo_reclu2 <- (artif_donante_sexo_2[["reclutamiento_1998_2016"]])
artif_donante_sexo_reclu3 <- (artif_donante_sexo_3[["reclutamiento_1998_2016"]])
artif_donante_sexo_reclu4 <- (artif_donante_sexo_4[["reclutamiento_1998_2016"]])
artif_donante_sexo_reclu5 <- (artif_donante_sexo_5[["reclutamiento_1998_2016"]])
comparacion_reclu <- complete_violencias_unidas_aux %>%
filter(violencia == "reclutamiento") %>%
select(match_group_id, muni_code_hecho, yy_hecho, sexo) %>%
mutate(sexo_obs = as.factor(sexo)) %>%
select(-sexo) %>%
merge(artif_donante_sexo_reclu1, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante1 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_reclu2, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante2 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_reclu3, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante3 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_reclu4, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante4 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_reclu5, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante5 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
as.data.table()
# Columnas a comparar
donante_cols <- c("sexo_donante1", "sexo_donante2", "sexo_donante3", "sexo_donante4", "sexo_donante5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (col in donante_cols) {
conf_matrix <- confusionMatrix(comparacion_reclu[[col]], comparacion_reclu$sexo_obs)
# Guardar métricas generales
metrics_list[[col]] <- conf_matrix$overall
# Guardar métricas específicas
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
}
# Crear un data frame con las métricas de cada matriz de confusión
metrics_df_reclu <- data.frame(
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_reclu <- generate_cv_summary(metrics_df_reclu)
metrics_cv_reclu
comparison_reclu_stat <- comparison_data(comparacion_reclu)
# Extraer estadísticos de los 5 folds
stats_summary_reclu <- generate_indicators_summary(comparison_reclu_stat)
stats_summary_reclu
# Secuestro
artif_donante_sexo_secue1 <- (artif_donante_sexo_1[["secuestro_1998_2016"]])
artif_donante_sexo_secue2 <- (artif_donante_sexo_2[["secuestro_1998_2016"]])
artif_donante_sexo_secue3 <- (artif_donante_sexo_3[["secuestro_1998_2016"]])
artif_donante_sexo_secue4 <- (artif_donante_sexo_4[["secuestro_1998_2016"]])
artif_donante_sexo_secue5 <- (artif_donante_sexo_5[["secuestro_1998_2016"]])
comparacion_secue <- complete_violencias_unidas_aux %>%
filter(violencia == "secuestro") %>%
select(match_group_id, muni_code_hecho, yy_hecho, sexo) %>%
mutate(sexo_obs = as.factor(sexo)) %>%
select(-sexo) %>%
merge(artif_donante_sexo_secue1, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante1 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_secue2, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante2 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_secue3, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante3 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_secue4, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante4 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
merge(artif_donante_sexo_secue5, by = c("match_group_id", "muni_code_hecho", "yy_hecho")) %>%
mutate(sexo_donante5 = as.factor(sexo_donante)) %>% select(-sexo_donante) %>%
as.data.table()
# Columnas a comparar
donante_cols <- c("sexo_donante1", "sexo_donante2", "sexo_donante3", "sexo_donante4", "sexo_donante5")
metrics_list <- list()
sensitivity_list <- c()
specificity_list <- c()
pos_pred_value_list <- c()
neg_pred_value_list <- c()
balanced_accuracy_list <- c()
# Calcular matrices de confusión
for (col in donante_cols) {
conf_matrix <- confusionMatrix(comparacion_secue[[col]], comparacion_secue$sexo_obs)
# Guardar métricas generales
metrics_list[[col]] <- conf_matrix$overall
# Guardar métricas específicas
sensitivity_list <- c(sensitivity_list, conf_matrix$byClass["Sensitivity"])
specificity_list <- c(specificity_list, conf_matrix$byClass["Specificity"])
pos_pred_value_list <- c(pos_pred_value_list, conf_matrix$byClass["Pos Pred Value"])
neg_pred_value_list <- c(neg_pred_value_list, conf_matrix$byClass["Neg Pred Value"])
balanced_accuracy_list <- c(balanced_accuracy_list, conf_matrix$byClass["Balanced Accuracy"])
}
# Crear un data frame con las métricas de cada matriz de confusión
metrics_df_secue <- data.frame(
Accuracy = sapply(metrics_list, function(x) x["Accuracy"]),
Sensitivity = sensitivity_list,
Specificity = specificity_list,
Pos_Pred_Value = pos_pred_value_list,
Neg_Pred_Value = neg_pred_value_list,
Balanced_Accuracy = balanced_accuracy_list
)
metrics_cv_secue <- generate_cv_summary(metrics_df_secue)
metrics_cv_secue
comparison_secue_stat <- comparison_data(comparacion_secue)
# Extraer estadísticos de los 5 folds
stats_summary_secue <- generate_indicators_summary(comparison_secue_stat)
stats_summary_secue
